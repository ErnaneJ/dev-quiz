{
  "title": "Ruby Association Certified Ruby Examination Gold Sample Questions",
  "description": "This is a basic skill-level certification of the knowledge on the background, grammar, classes, objects, and standard libraries of Ruby.", 
  "theme": "Language Ruby",
  "version": "2.1",
  "language": "en",
  "cover_image": "https://www.ruby.or.jp/assets/images/ja/certification/examination/logo_gold_v21.png",
  "questions": [
    {
      "statement": "Which of the following have true values in Ruby?",
      "code": "",
      "quantity_to_select": "2",
      "options": {
        "a": "\" \"",
        "b": "0",
        "c": "false",
        "d": "nil"
      },
      "answer": {
        "options": ["a", "b"],
        "description": "In Ruby, all objects have a logical value for use in conditional statements.\nThe objects false and nil are treated as logically false, all other objects are treated as logically true."
      },
      "topics": ["objects", "Conditional statements"]
    },
    {
      "statement": "Which of the following are reserved words in Ruby?",
      "code": "",
      "quantity_to_select": "2",
      "options": {
        "a": "each",
        "b": "rand",
        "c": "class",
        "d": "send",
        "e": "true"
      },
      "answer": {
        "options": ["c", "e"],
        "description": "The complete list of reserved words as of Ruby 2.1 is listed below:"
      }
    },
    {
      "statement": "Which variable name is valid in Ruby?",
      "code": "",
      "quantity_to_select": "1",
      "options": {
        "a": "3y",
        "b": "false",
        "c": "_9class",
        "d": "xyz$"
      },
      "answer": {
        "options": ["c"],
        "description": "Ruby variable names must begin with a lowercase letter or underscore, and may contain only letters, numbers, and underscore characters.\nVariable names must not conflict with keywords (e.g. you cannot have a variable called class), but unambiguous names that contain reserved words are acceptable (i.e. both classy and _class are valid Ruby variable names)"
      }
    },
    {
      "statement": "Which of the following can be inserted into __(1)__ in order to generate the output below?",
      "code": "$code = \"CODE\"\n__(1)__\n[Output]\ni like writing CODE",
      "quantity_to_select": "2",
      "options": {
        "a": "puts \"i like writing #{$code}\"",
        "b": "puts \"i like writing #$code\"",
        "c": "puts 'i like writing #{$code}'",
        "d": "puts 'i like writing #$code'"
      },
      "answer": {
        "options": ["a", "b"],
        "description": "Single quoted string literals are simple, and are meant to represent raw sequences of characters.\nDouble quoted string literals are more complex, but offer extra features such as string interpolation (#{...}), where entire Ruby expressions can be evaluated and inserted into a string.\nAs a shortcut, #$ is usable for inserting the contents of a global variable into a string. (Similarly, #@ can be used with instance variables). This shortcut variant is less commonly used than the more general #{...} form."
      }
    },
    {
      "statement": "Given the following:",
      "code": "num = 025\nputs num",
      "quantity_to_select": "2",
      "options": {
        "a": "nil",
        "b": "025",
        "c": "21",
        "d": "25"
      },
      "answer": {
        "options": ["c"],
        "description": "A leading zero in an integer literal indicates 'octal-mode' in Ruby, i.e. a number in base 8 format. However, all print functions in Ruby will output numeric values in base 10 by default.\nShould you need to output numbers in something other than base 10, there are many different functions in Ruby for formatted numeric output (e.g. String#%, Numeric#to_s(base), Kernel#sprintf)"
      }
    }
  ]
}