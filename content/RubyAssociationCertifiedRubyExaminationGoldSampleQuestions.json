{
  "title": "Ruby Association Certified Ruby Examination Silver Sample Questions",
  "description": "This is a certification of a deeper understanding of the topics covered under Silver certification (syntax, object oriented programming, embedded libraries, operating environments, etc.) in addition to knowledge of the standard Ruby libraries and knowledge related to classes and objects required for Ruby application design.", 
  "theme": "Language Ruby",
  "version": "2.1",
  "cover_image": "https://www.ruby.or.jp/assets/images/ja/certification/examination/logo_silver_v21.png",
  "questions": [
    {
      "statement": " Assume that the following code must have the stated execution result. Which option can be inserted into __(1)__",
      "code": "__(1)__\nx.each_line { |line| puts line }\n# [Execution Result]\napple\nbanana",
      "quantity_to_select": "1",
      "options": {
        "a": "require \"stringbuffer\"\nx = StringBuffer.new(\"apple\nbanana\n\")",
        "b": "require \"stringio\" \nx = StringIO.new(\"apple\nbanana\n\")",
        "c": "require \"strio\" \n x = StrIO.new(\"apple\nbanana\n\")",
        "d": "require \"mockio\" \n x = MockIO.new(\"apple\nbanana\n\")"
      },
      "answer": {
        "options": ["b"],
        "description": "The StringIO object (from the standard library) provides an IO-like object that operates on strings rather than file/network/stdio streams. This object can be useful for testing code that relies on I/O operations."
      }
    },
    {
      "statement": "Which of the following are reserved words in Ruby?",
      "code": "",
      "quantity_to_select": "2",
      "options": {
        "a": "each",
        "b": "rand",
        "c": "class",
        "d": "send",
        "e": "true"
      },
      "answer": {
        "options": ["c", "e"],
        "description": "The complete list of reserved words as of Ruby 2.1 is listed below:"
      }
    },
    {
      "statement": "Which variable name is valid in Ruby?",
      "code": "",
      "quantity_to_select": "1",
      "options": {
        "a": "3y",
        "b": "false",
        "c": "_9class",
        "d": "xyz$"
      },
      "answer": {
        "options": ["c"],
        "description": "Ruby variable names must begin with a lowercase letter or underscore, and may contain only letters, numbers, and underscore characters.\nVariable names must not conflict with keywords (e.g. you cannot have a variable called class), but unambiguous names that contain reserved words are acceptable (i.e. both classy and _class are valid Ruby variable names)"
      }
    },
    {
      "statement": "Which of the following can be inserted into __(1)__ in order to generate the output below?",
      "code": "$code = \"CODE\"\n__(1)__\n[Output]\ni like writing CODE",
      "quantity_to_select": "2",
      "options": {
        "a": "puts \"i like writing #{$code}\"",
        "b": "puts \"i like writing #$code\"",
        "c": "puts 'i like writing #{$code}'",
        "d": "puts 'i like writing #$code'"
      },
      "answer": {
        "options": ["a", "b"],
        "description": "Single quoted string literals are simple, and are meant to represent raw sequences of characters.\nDouble quoted string literals are more complex, but offer extra features such as string interpolation (#{...}), where entire Ruby expressions can be evaluated and inserted into a string.\nAs a shortcut, #$ is usable for inserting the contents of a global variable into a string. (Similarly, #@ can be used with instance variables). This shortcut variant is less commonly used than the more general #{...} form."
      }
    }
  ]
}