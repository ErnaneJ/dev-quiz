{
  "title": "Ruby Examination Silver",
  "description": "This is a basic skill-level certification of the knowledge on the background, grammar, classes, objects, and standard libraries of Ruby. The logo below identifies people who are certified.  ", 
  "theme": "Ruby",
  "version": "2.1",
  "language": "en",
  "cover_image": "https://www.ruby.or.jp/assets/images/ja/certification/examination/logo_silver_v21.png",
  "questions": [
    {
      "statement": "Which of the following have true values in Ruby?",
      "code": "",
      "quantity_to_select": "2",
      "options": {
        "a": "\" \"",
        "b": "0",
        "c": "false",
        "d": "nil"
      },
      "answer": {
        "options": ["a", "b"],
        "description": "In Ruby, all objects have a logical value for use in conditional statements.\n The objects <strong>false</strong> and <strong>nil</strong> are treated as logically false, all other objects are treated as logically true."
      },
      "topics": ["objects", "Conditional statements"]
    },
    {
      "statement": "Which of the following are reserved words in Ruby?",
      "code": "",
      "quantity_to_select": "2",
      "options": {
        "a": "each",
        "b": "rand",
        "c": "class",
        "d": "send",
        "e": "true"
      },
      "answer": {
        "options": ["c", "e"],
        "description": "The complete list of reserved words as of Ruby 2.1 is listed in <a target=\"_blank\" href=\"https://www.studytonight.com/ruby/reserved-keywords-in-ruby\">studytonight</a>"
      },
      "topics": ["Reserved words"]
    },
    {
      "statement": "Which variable name is valid in Ruby?",
      "code": "",
      "quantity_to_select": "1",
      "options": {
        "a": "3y",
        "b": "false",
        "c": "_9class",
        "d": "xyz$"
      },
      "answer": {
        "options": ["c"],
        "description": "Ruby variable names must begin with a lowercase letter or underscore, and may contain only letters, numbers, and underscore characters.\nVariable names must not conflict with keywords (e.g. you cannot have a variable called <strong>class</strong>), but unambiguous names that contain reserved words are acceptable (i.e. both <strong>classy</strong> and <strong>_class</strong> are valid Ruby variable names)"
      },
      "topics": ["variable names", "keywords"]
    },
    {
      "statement": "Which of the following can be inserted into __(1)__ in order to generate the output below?",
      "code": "$code = \"CODE\"\n__(1)__\n\n[Output]\ni like writing CODE",
      "quantity_to_select": "2",
      "options": {
        "a": "puts \"i like writing #{$code}\"",
        "b": "puts \"i like writing #$code\"",
        "c": "puts \"i like writing #{$code}\"",
        "d": "puts \"i like writing #$code\""
      },
      "answer": {
        "options": ["a", "b"],
        "description": "Single quoted string literals are simple, and are meant to represent raw sequences of characters.\nDouble quoted string literals are more complex, but offer extra features such as string interpolation (<strong>#{...}</strong>), where entire Ruby expressions can be evaluated and inserted into a string.\nAs a shortcut, <strong>#$</strong> is usable for inserting the contents of a global variable into a string. (Similarly, <strong>#@</strong> can be used with instance variables). This shortcut variant is less commonly used than the more general <strong>#{...}</strong> form."
      },
      "topics": ["string literals", "characters"]
    },
    {
      "statement": "Given the following:",
      "code": "num = 025\nputs num",
      "quantity_to_select": "1",
      "options": {
        "a": "nil",
        "b": "025",
        "c": "21",
        "d": "25"
      },
      "answer": {
        "options": ["c"],
        "description": "A leading zero in an integer literal indicates 'octal-mode' in Ruby, i.e. a number in base 8 format. However, all print functions in Ruby will output numeric values in base 10 by default.\nShould you need to output numbers in something other than base 10, there are many different functions in Ruby for formatted numeric output (e.g. String#%, Numeric#to_s(base), Kernel#sprintf)"
      },
      "topics": ["functions", "output numeric values"]
    },
    {
      "statement": "Given the following:",
      "code": "x = \"Hello\"\ny = x.empty? ? 1 : 2\np y",
      "quantity_to_select": "1",
      "options": {
        "a": "1",
        "b": "2",
        "c": "\"Hello\"",
        "d": true
      },
      "answer": {
        "options": ["b"],
        "description": "The ternary operator (cond ? expr1 : expr2) is a compact form of if/else which will return expr1 if cond is true, otherwise will return expr2. It is most suitable for short statements that easily fit on a single line."
      },
      "topics": ["ternary operator", "if/else"]
    },
    {
      "statement": "Given the following:",
      "code": "amount = 120\n\nsize = case amount\n  when 1..120; \"S\"\n  when 120..170; \"M\"\n  when 170..200; \"L\"\n  else \"XL\"\nend\n\np size",
      "quantity_to_select": "1",
      "options": {
        "a": "\"5\"",
        "b": "\"M\"",
        "c": "\"L\"",
        "d": "\"XL\""
      },
      "answer": {
        "options": ["a"],
        "description": "Ruby case statements will select the first branch to match its when condition.\n\nBecause Ruby's two-dot range literal is an inclusive range, the end value is included as part of the range.\n\nSo although both 1..120 and 120..170 include 120, the when 1..120 branch is matched because it appears first in the case statement."
      },
      "topics": ["Ruby case statements"]
    },
    {
      "statement": "Given the following:",
      "code": "puts \"hello\".encoding.name",
      "quantity_to_select": "1",
      "options": {
        "a": "ASCII-8BIT",
        "b": "UTF-8",
        "c": "Windows-1252",
        "d": "A syntax error occurs."
      },
      "answer": {
        "options": ["b"],
        "description": "When a coding: comment is omitted, Ruby will use UTF-8 by default for its source encoding."
      },
      "topics": ["source encoding"]
    },
    {
      "statement": "Which of the following are correct to specify Windows-1252 as the encoding of the source code?",
      "code": "",
      "quantity_to_select": "2",
      "options": {
        "a": "# charset: Windows-1252",
        "b": "# chars: Windows-1252",
        "c": "# coding: Windows-1252",
        "d": "# encoding: Windows-1252"
      },
      "answer": {
        "options": ["c", "d"],
        "description": "The encoding magic comment must appear as the first line of the file, unless a UNIX shebang line is present (in that case, the encoding line would be placed on the second line)."
      },
      "topics": ["magic comment"]
    },
    {
      "statement": "Which of the following statements are true?",
      "code": "",
      "quantity_to_select": "2",
      "options": {
        "a": "Local variables start with a lower case letter, and are two or more characters in length.",
        "b": "Global variables start with $.",
        "c": "Instance variables start with *.",
        "d": "Class variables start with $.",
        "e": "Constants start with an upper case letter."
      },
      "answer": {
        "options": ["b", "e"],
        "description": "Some notes on Ruby variable naming rules: Global variables start with $; Class variables start with @@; Instance variables start with @; Local variables must begin with a lowercase letter or an underscore; The remaining characters in any variable type are limited to letters, numbers, and underscores."
      },
      "topics": ["Ruby variable naming rules"]
    }
  ]
}